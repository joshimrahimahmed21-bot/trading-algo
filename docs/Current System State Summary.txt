Current System State Summary
To recap the state of the MNQRSTest strategy as of now (mid-Pass 16, before Pass 16.5 completion):
•	DefaultQuantityParam Removed: We no longer expose DefaultQuantity as a user parameter. The code that created DefaultQuantityParam and set DefaultQuantity = DefaultQuantityParam[61]has been eliminated. DefaultQuantity is hard-coded to 1 in SetDefaults and not touched afterward. This avoids runtime errors and confusion in the UI/Analyzer.
•	BaseContracts for Sizing: A new int parameter BaseContracts (range 1–100) has been introduced to control trade size per entry. This is now the value a user sets for how many micro NASDAQ contracts to trade. All sizing logic references BaseContracts. For example, runner eligibility is checked via BaseContracts >= 2 (meaning 2 or more contracts available to allow a split)[34]. Internally, until we finish wiring, we still use DefaultQuantity in a couple places; but conceptually BaseContracts is the active sizing input (and we will replace those references imminently).
•	Trade Logic “Silent” for Multi-Contract: Because the entry methods haven’t been updated yet to use BaseContracts, the strategy currently will only enter 1 contract even if BaseContracts is set higher. In backtests, you might notice trades appear as 1 contract – that’s expected until Pass 16.5 is done. Once we pass the BaseContracts to EnterLong/Short, the strategy will properly trade multiple contracts. So at the moment, the strategy behaves functionally but is effectively trading one contract always, which means runner logic never actually splits (since DefaultQuantity=1 yields no runner). This is a temporary state.
•	Runner Eligibility Checks in Place: Despite the above, the logic for runner eligibility is implemented. The code checks (pseudocode) if (ApplyRunnerManagement && BaseContracts >= 2 && lastQRes >= RunnerSpaceThreshold && lastQMomoCore >= RunnerMomoThreshold) then allow split[36]. So as soon as multi-contract entries are enabled, the strategy will automatically start splitting trades into CORE/RUNNER when those conditions are met. If BaseContracts is 1, or if momentum/space conditions aren’t satisfied, it will take a single position (with 1R stop/target). These conditions mean the strategy is prepared to handle both single-contract and multi-contract scenarios appropriately.
•	ForceEntry Available: The ForceEntry debug flag exists and is functional[80]. By design it’s off by default and not exposed as a regular user param (it’s marked as Group “Debug”, Order=999 to be out of the way)[109]. Developers/testers can turn it on to stress-test the order logic. In the current state, if you turn on ForceEntry and set BaseContracts to, say, 3, it will still only enter 1 contract (because of the unwired quantity issue). After wiring, ForceEntry will honor BaseContracts. This flag should remain false in production or formal backtests, as it bypasses all strategy logic and will trade every bar.
•	Known Open Issues: Aside from the BaseContracts wiring, we know that volume profile context is still using stub values (tailwind/headwind always zero). That means any code depending on VP signals (e.g., VP runner scaling) isn’t truly active – it will just calculate no change. Also, some parameters like UseVPTrailSwitch and HysteresisBars are defined but not yet utilized in logic. These will be addressed in future passes (as outlined above). Importantly, no critical bugs are known in the already-implemented logic: the strategy runs through backtests without throwing errors after the DefaultQuantityParam fix. The primary “bug” at the moment is simply that trades are single-contract due to the incomplete wiring.
•	UI/UX: In the strategy UI, the user will now see BaseContracts instead of DefaultQuantity. We should ensure the display name or description for BaseContracts clarifies it (e.g. “Number of contracts to trade per entry”). They will also see all the various filters, thresholds, and toggles grouped nicely. DefaultQuantity might still appear in the properties (because it’s an inherited property from Strategy), but it won’t be editable (NT hides it or leaves it read-only if not exposed). This eliminates confusion where previously one might see both DefaultQuantity and DefaultQuantityParam – now it’s just BaseContracts.
In short, the system is stable with all major features implemented, but multi-contract trading is the one piece in progress. Once that is done, the strategy will fully utilize its runner logic and all components in live action.
